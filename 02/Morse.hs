module Morse (decode) where

import Data.List.Split
import Data.Map

decode :: String -> Maybe String
decode = fmap unwords . traverse (traverse (morses !?) . words) . splitOn " / "

morses :: Map String Char
morses = fromList
  [ (".-", 'a')
  , ("-...", 'b')
  , ("-.-.", 'c')
  , ("-..", 'd')
  , (".", 'e')
  , ("..-.", 'f')
  , ("--.", 'g')
  , ("....", 'h')
  , ("..", 'i')
  , (".---", 'j')
  , ("-.-", 'k')
  , (".-..", 'l')
  , ("--", 'm')
  , ("-.", 'n')
  , ("---", 'o')
  , (".--.", 'p')
  , ("--.-", 'q')
  , (".-.", 'r')
  , ("...", 's')
  , ("-", 't')
  , ("..-", 'u')
  , ("...-", 'v')
  , (".--", 'w')
  , ("-..-", 'x')
  , ("-.--", 'y')
  , ("--..", 'z')
  , ("-...-", '=')
  , ("..--..", '?')
  , ("-..-.", '/')
  , ("--..--", ',')
  , (".-.-.-", '.')
  , ("---...", ':')
  , (".----.", '\'')
  , ("-....-", '-')
  , ("-.--.", '(')
  , ("-.--.-", ')')
  , ("-----", '0')
  , (".----", '1')
  , ("..---", '2')
  , ("...--", '3')
  , ("....-", '4')
  , (".....", '5')
  , ("-....", '6')
  , ("--...", '7')
  , ("---..", '8')
  , ("----.", '9')
  , (".--.-.", '@')
  ]
